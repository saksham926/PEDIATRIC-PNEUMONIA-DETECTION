# -*- coding: utf-8 -*-
"""pediatric-pneumonia-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ixk74pdqzdGy6Od8uyLUzXqwL0z6_m8
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

#importing the libraries

import tensorflow as tf
from tensorflow import keras
from keras.models import Model
from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Sequential
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Activation
from tensorflow.keras.callbacks import EarlyStopping

#importing cv2 library to load image data

import cv2
import os
import glob
import seaborn as sns

train_images=[]
train_labels=[]

#storing the train dataset images into train_images and it's labels in train_labels
for directory_path in glob.glob('../input/labeled-chest-xray-images/chest_xray/train/*'):
    label=directory_path.split('\\')[-1]
    print(label)
    for img_path in glob.glob(os.path.join(directory_path,'*.jpeg')):
        img=cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)
        img=cv2.resize(img,(224,224))
        train_images.append(img)
        train_labels.append(label)

#displaying the pixels 

print(train_images[:2])

#storing the test dataset images into test_images and it's labels in test_labels

test_images=[]
test_labels=[]

for directory_path in glob.glob('../input/labeled-chest-xray-images/chest_xray/test/*'):
    label=directory_path.split('\\')[-1]
    print(label)
    for img_path in glob.glob(os.path.join(directory_path,'*.jpeg')):
        img=cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)
        img=cv2.resize(img,(224,224))
        test_images.append(img)
        test_labels.append(label)

train_images[0].shape

#converting all the data in the numpy array to do further calculations
train_images=np.array(train_images)
train_images=train_images/255

#converting all the data in the numpy array to do further calculations
train_labels=np.array(train_labels)
test_images=np.array(test_images)
test_images=test_images/255
test_labels=np.array(test_labels)

#converting the categorical features in this case pneumonia and normal to numbers(0 and 1) 
from sklearn import preprocessing

le = preprocessing.LabelEncoder()
le.fit(train_labels)
train_labels = le.transform(train_labels)
le.fit(test_labels)
test_labels=le.transform(test_labels)

fig, axes = plt.subplots(ncols=7, nrows=2, figsize=(16, 4))

indices = np.random.choice(len(train_images), 14)
counter = 0

for i in range(2):
    for j in range(7):
        if train_labels[indices[counter]]==1:
            axes[i,j].set_title('Pneumonia')
        elif train_labels[indices[counter]]==0:
            axes[i,j].set_title('Normal')
        axes[i,j].imshow(train_images[indices[counter]], cmap='gray')
        axes[i,j].get_xaxis().set_visible(False)
        axes[i,j].get_yaxis().set_visible(False)
        counter += 1
plt.show()

#converting the dataset into the desired shape to feed it into a convolution neural network
train_images=train_images.reshape(len(train_images),224,224,1)
test_images=test_images.reshape(len(test_images),224,224,1)

def build_model(hp):
    model=keras.Sequential([
        #adding convoluyion layer
        keras.layers.Conv2D(filters=hp.Int('conv_1_filter',min_value=15,max_value=400,step=16),
                           kernel_size=hp.Choice('conv_1_kernal',values=[3,5]),
                           activation='relu',
                           input_shape=(224,224,1)),
        #adding max pooling layer
        keras.layers.MaxPool2D(pool_size=(2,2),padding='valid'),
        #adding dropout layer
        keras.layers.Dropout(0.2),
        
        
        #adding convoluyion layer with relu activation function
        keras.layers.Conv2D(filters=hp.Int('conv_2_filter',min_value=20,max_value=300,step=16),
                           kernel_size=hp.Choice('conv_2_kernal',values=[3,5]),
                           activation='relu',kernel_regularizer =tf.keras.regularizers.l2( l=0.01)),
        #adding max pooling layer
        keras.layers.MaxPool2D(pool_size=(2,2),padding='valid'),
        #adding dropout layer
        keras.layers.Dropout(0.2),
       
        #adding convolution layer with relu activation function
        keras.layers.Conv2D(filters=hp.Int('conv_3_filter',min_value=20,max_value=300,step=16),
                           kernel_size=hp.Choice('conv_3_kernal',values=[3,5]),
                           activation='relu',kernel_regularizer =tf.keras.regularizers.l2( l=0.01)),
        #adding max pooling layer
        keras.layers.MaxPool2D(pool_size=(2,2),padding='valid'),
        
        
        #adding convolution layer with relu activation function
        keras.layers.Conv2D(filters=hp.Int('conv_4_filter',min_value=10,max_value=100,step=16),
                           kernel_size=hp.Choice('conv_4_kernal',values=[3,5]),
                           activation='relu',kernel_regularizer =tf.keras.regularizers.l2( l=0.01)),
        #adding max pooling layer
        keras.layers.MaxPool2D(pool_size=(2,2),padding='valid'),
        
        #adding convolution layer with relu activation activation function
        keras.layers.Conv2D(filters=hp.Int('conv_5_filter',min_value=10,max_value=100,step=10),
                           kernel_size=hp.Choice('conv_5_kernal',values=[3,5]),
                           activation='relu',kernel_regularizer =tf.keras.regularizers.l2( l=0.01)),
        #adding max pooling layer
        keras.layers.MaxPool2D(pool_size=(2,2),padding='valid'),
        
        #adding flatten layer for input for dense layers
        keras.layers.Flatten(),
        #adding dense layer with relu activation function
        keras.layers.Dense(units=hp.Int('dense_1_units',min_value=10,max_value=300,step=10),
                          activation='relu',kernel_regularizer =tf.keras.regularizers.l2( l=0.01)),
        
        #adding dense layer with relu activation function
        keras.layers.Dense(units=hp.Int('dense_2_units',min_value=10,max_value=200,step=5),
                          activation='relu'),
        #adding dropout layer
        keras.layers.Dropout(0.2),
        #adding dense layer with relu activation function
        keras.layers.Dense(units=hp.Int('dense_3_units',min_value=5,max_value=200,step=2),
                          activation='relu'),
        #adding dropout layer
        keras.layers.Dropout(0.2),
        #adding dense layer with softmax function
        keras.layers.Dense(units=2,activation='softmax'),
    ])
    #compiling the model with adam optimizer
    model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate',values=[1e-2,1e-3])),
                 loss='sparse_categorical_crossentropy',
                 metrics=['accuracy'])
    
    return model

# Using kerastuner to get the best hyperparameters for our model
from kerastuner import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameters

tuner_search=RandomSearch(build_model,
                          objective='val_accuracy',
                          max_trials=10,directory='output',project_name="Pneumonia detection")

tuner_search.search(train_images,train_labels,epochs=10,validation_data=(test_images,test_labels))

# Getting the best model
model=tuner_search.get_best_models(num_models=1)[0]

#displaying the layers of the best model
model.summary()

history=model.fit(train_images, train_labels, epochs=20, validation_data=(test_images,test_labels), initial_epoch=10)

loss,accuracy=model.evaluate(test_images,test_labels)

#plotting accuracy vs validation accuracy
plt.figure(figsize=(8,6))
plt.title('Accuracy scores')
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['accuracy', 'val_accuracy'])
plt.show(plt.figure(figsize=(8,6)))
#plotting loss vs validation loss
plt.title('Loss value')
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['loss', 'val_loss'])
plt.show()